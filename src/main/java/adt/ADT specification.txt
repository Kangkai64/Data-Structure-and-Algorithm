ADT ArrayBucketList
An ArrayBucketList is a hash table-based collection of key-value pairs that implements DictionaryInterface<K, V>. It uses separate chaining for collision resolution, where each entry is stored in a bucket (implemented as a circular doubly-linked list) based on its hash code. The data structure automatically resizes when the load factor exceeds a threshold of 0.75. It supports both dictionary operations and queue functionality.

Constructors:
ArrayBucketList()
Description: Creates an ArrayBucketList with default bucket count (16).
Postcondition: An empty ArrayBucketList is created with 16 buckets.

ArrayBucketList(int bucketCount)
Description: Creates an ArrayBucketList with specified bucket count.
Precondition: bucketCount > 0.
Postcondition: An empty ArrayBucketList is created with the specified number of buckets.

ArrayBucketList(int bucketCount, HashFunction<K> hashFunction)
Description: Creates an ArrayBucketList with specified bucket count and custom hash function.
Precondition: bucketCount > 0.
Postcondition: An empty ArrayBucketList is created with the specified number of buckets and custom hash function.

DictionaryInterface Methods:
V add(K key, V value)
Description: Adds a new key-value pair to the ArrayBucketList. If the key already exists, replaces the value.
Precondition: key and value must not be null.
Postcondition: The key-value pair has been added to the appropriate bucket. If the key existed, the old value is replaced. The bucket array may be resized if the load factor exceeds 0.75.
Returns: The old value if the key existed; null if this is a new entry.

V remove(K key)
Description: Removes the entry with the specified key from the ArrayBucketList.
Precondition: None.
Postcondition: If the key exists, the entry has been removed from its bucket and the total number of entries is decremented by 1.
Returns: The value associated with the key if found; null if the key was not found.

V getValue(K key)
Description: Retrieves the value associated with the specified key.
Precondition: None.
Postcondition: The ArrayBucketList remains unchanged.
Returns: The value associated with the key if found; null otherwise.

boolean contains(K key)
Description: Checks whether the specified key exists in the ArrayBucketList.
Precondition: None.
Postcondition: The ArrayBucketList remains unchanged.
Returns: true if the key is found; false otherwise.

boolean isEmpty()
Description: Checks whether the ArrayBucketList contains any entries.
Precondition: None.
Postcondition: The ArrayBucketList remains unchanged.
Returns: true if the list contains no entries; false otherwise.

boolean isFull()
Description: Checks whether the ArrayBucketList needs to be resized.
Precondition: None.
Postcondition: The ArrayBucketList remains unchanged.
Returns: true if the load factor exceeds 0.75; false otherwise.

int getSize()
Description: Gets the total number of entries in the ArrayBucketList.
Precondition: None.
Postcondition: The ArrayBucketList remains unchanged.
Returns: The total number of key-value pairs across all buckets.

void clear()
Description: Removes all entries from the ArrayBucketList.
Precondition: None.
Postcondition: All buckets are empty and the total number of entries is 0.

Queue Methods:
void addToQueue(K key, V value)
Description: Adds a key-value pair to the internal queue if it is valid and not already present.
Precondition: key and value must not be null.
Postcondition: The key-value pair has been added to the queue if it doesn't already exist.

V removeFront()
Description: Removes and returns the first element from the queue.
Precondition: None.
Postcondition: The first element has been removed from the queue.
Returns: The value of the first element if the queue is not empty; null if the queue is empty.

V peekFront()
Description: Returns the first element from the queue without removing it.
Precondition: None.
Postcondition: The queue remains unchanged.
Returns: The value of the first element if the queue is not empty; null if the queue is empty.

boolean queueContains(K key)
Description: Checks whether the specified key exists in the queue.
Precondition: None.
Postcondition: The queue remains unchanged.
Returns: true if the key is found in the queue; false otherwise.

int getQueueSize()
Description: Gets the number of elements in the queue.
Precondition: None.
Postcondition: The queue remains unchanged.
Returns: The number of elements currently in the queue.

Search Methods:
ArrayBucketList<K, V> getByStringKeyPrefix(String prefix)
Description: Returns a new ArrayBucketList containing all entries whose String keys start with the given prefix (case-insensitive).
Precondition: None.
Postcondition: The original ArrayBucketList remains unchanged.
Returns: A new ArrayBucketList containing matching entries; empty list if prefix is null or no matches found.

Utility Methods:
double getLoadFactor()
Description: Calculates the current load factor of the ArrayBucketList.
Precondition: None.
Postcondition: The ArrayBucketList remains unchanged.
Returns: The load factor as a double value (total entries divided by bucket count).

V[] toArray(Class<V> arrayClass)
Description: Converts the ArrayBucketList to an array for sorting purposes.
Precondition: arrayClass must not be null.
Postcondition: The ArrayBucketList remains unchanged.
Returns: An array containing all values from the ArrayBucketList.

Iterator<V> iterator()
Description: Returns an iterator that provides sequential access to all values in the ArrayBucketList.
Precondition: None.
Postcondition: The ArrayBucketList remains unchanged.
Returns: An iterator over all values in the ArrayBucketList, visiting each bucket in order.

String toString()
Description: Returns a string representation of the ArrayBucketList showing all buckets and their contents.
Precondition: None.
Postcondition: The ArrayBucketList remains unchanged.
Returns: A formatted string showing the structure and contents of the ArrayBucketList.

String parseElementsToString()
Description: Returns a string representation of all values in the ArrayBucketList.
Precondition: None.
Postcondition: The ArrayBucketList remains unchanged.
Returns: A string containing the string representation of each value, one per line.

HashFunction Interface:
@FunctionalInterface
HashFunction<T>
Description: Functional interface for custom hash functions.
Method: int hash(T key, int bucketCount)
Description: Computes the hash code for the given key and bucket count.
Returns: The bucket index for the given key.
