ADT DictionaryInterface
A DictionaryInterface is a generic interface that defines the contract for a dictionary abstract data type. A dictionary stores key-value pairs where each key is unique and associated with a corresponding value. This interface provides the fundamental operations required for dictionary functionality in the Clinic Management System.

V add(K key, V value)
Description: Adds a new key-value pair to the dictionary or updates an existing key's value.
Precondition: key is not null and value is not null.
Postcondition: If the key does not exist, a new entry is added to the dictionary. If the key already exists, the existing value is replaced with the new value. Dictionary size increases by 1 if new entry was added or remains the same if replacement occurred.
Returns: null if a new entry was added, or the previous value if an existing key was updated.
Exceptions: May throw IllegalArgumentException if key or value is null, or IllegalStateException if dictionary is full for fixed-size implementations.

V remove(K key)
Description: Removes a specific key-value pair from the dictionary.
Precondition: key is not null.
Postcondition: If the key exists, the key-value pair is removed from the dictionary and size decreases by 1. If the key does not exist, dictionary remains unchanged.
Returns: The value associated with the removed key, or null if the key was not found in the dictionary.
Exceptions: May throw IllegalArgumentException if key is null.

V getValue(K key)
Description: Retrieves the value associated with a given key without removing it.
Precondition: key is not null.
Postcondition: The dictionary remains unchanged with no side effects.
Returns: The value associated with the specified key, or null if the key is not found in the dictionary.
Exceptions: May throw IllegalArgumentException if key is null.

boolean contains(K key)
Description: Checks whether a specific key exists in the dictionary.
Precondition: key is not null.
Postcondition: The dictionary remains unchanged with no side effects.
Returns: true if the key exists in the dictionary, or false if the key is not found.
Exceptions: May throw IllegalArgumentException if key is null.

boolean isEmpty()
Description: Determines whether the dictionary contains any entries.
Precondition: None.
Postcondition: The dictionary remains unchanged with no side effects.
Returns: true if the dictionary has no entries, or false if the dictionary contains at least one entry.

boolean isFull()
Description: Determines whether the dictionary has reached its maximum capacity.
Precondition: None.
Postcondition: The dictionary remains unchanged with no side effects.
Returns: true if the dictionary cannot accept more entries, or false if the dictionary can accept additional entries.
Note: For dynamic implementations like ArrayBucketList, this method typically returns false as the structure can grow indefinitely.

int getSize()
Description: Returns the current number of key-value pairs in the dictionary.
Precondition: None.
Postcondition: The dictionary remains unchanged with no side effects.
Returns: The number of entries currently stored in the dictionary as a non-negative integer.

void clear()
Description: Removes all entries from the dictionary.
Precondition: None.
Postcondition: All key-value pairs are removed from the dictionary, dictionary becomes empty with size 0, and all internal structures are reset to initial state.
Returns: void.

Implementation Requirements:
Key Requirements:
1. Uniqueness: Each key must be unique within the dictionary.
2. Null Handling: Keys and values should not be null, implementation-dependent.
3. Consistency: Operations should maintain dictionary integrity.
4. Performance: Operations should be efficient for typical use cases.

Expected Performance Characteristics:
add(): O(1) average case, O(n) worst case
remove(): O(1) average case, O(n) worst case
getValue(): O(1) average case, O(n) worst case
contains(): O(1) average case, O(n) worst case
isEmpty(): O(1)
isFull(): O(1)
getSize(): O(1)
clear(): O(n)

Usage in Clinic Management System:
The DictionaryInterface serves as the foundation for various data structures in the Clinic Management System:
1. Patient Records: Store patient information with patient ID as key
2. Doctor Schedules: Map doctor IDs to their appointment schedules
3. Medicine Inventory: Track medicine stock with medicine ID as key
4. Appointment Management: Store appointments with appointment ID as key
5. Treatment Records: Map patient IDs to their treatment histories

Design Patterns:
The interface follows these design principles:
1. Separation of Concerns: Clear distinction between interface and implementation
2. Generic Programming: Type-safe operations with generic parameters
3. Contract-Based Design: Well-defined preconditions and postconditions
4. Extensibility: Easy to extend with additional operations as needed

Related Classes:
ArrayBucketList: Primary implementation of this interface
HashUtility: Provides hash functions for key distribution
Entity Classes: Patient, Doctor, Medicine, etc. that use this interface 